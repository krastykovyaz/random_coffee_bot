"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª–Ω—è–µ—Ç Yandex Cloud Function –ø—Ä–∏ –æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–∞
–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ aiogram
–í –∫–∞—á–µ—Å—Ç–≤–µ –ë–î –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Yandex DataBase. –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ñ–∞–π–ª–µ db.py

–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ webhook.
–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –±–æ—Ç—É, —Ç–µ–ª–µ–≥—Ä–∞–º —à–ª–µ—Ç —Å–æ–æ–±—à–µ–Ω–∏–µ –≤ —è–Ω–¥–µ–∫—Å —Ñ—É–Ω–∫—Ü–∏—é.
—Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –¥–≤—É—Ö –≤–∏–¥–æ–≤:
    -—Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å(message)
    -—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–Ω–æ–ø–∫–µ, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å(callback_query)
–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç—Å—è –∏ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞ –≤—Ö–æ–¥ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ aiogram.
–í —Å–∫—Ä–∏–ø—Ç–µ –ø—Ä–æ–ø–∏—Å–∞–Ω—ã —Ö–µ–Ω–¥–ª–µ—Ä—ã(–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏) –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.
–ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Å–ø–∏—Å–∫—É —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ—Ç —Å–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
-TELEGRAM_KEY(—Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞)
-YDB_ENDPOING(–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
-YDB_DATABASE(–∏–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
-ADMIN_TGID(ID –∞–¥–º–∏–Ω–∞ –±–æ—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ)
-TRIGERS(–Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑—è–ø—è—Ç—É—é)

—Ç—Ä–∏–≥–µ—Ä—ã - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—ã–ª–∞–µ—Ç —è–Ω–¥–µ–∫—Å –∫–ª–∞—É–¥ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
–ø–æ–¥ —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–∫—Ä–∏–ø—Ç–µ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

–í –±–æ—Ç–µ –µ—Å—Ç—å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏. –ß—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, 
—Ç–∞–º –≥–¥–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–ª–æ–Ω–∫—É state —Ç–∞–±–ª–∏—Ü—ã users
"""

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text

import os
import random
import logging
import uuid
import json
import datetime
import db
import traceback

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ aiogram
bot = Bot(os.environ.get('TELEGRAM_KEY'))
dp = Dispatcher(bot)

# Logger initialization and logging level setting
log = logging.getLogger(__name__)
log.setLevel(os.environ.get('LOGGING_LEVEL', 'INFO').upper())

# —á–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –∏ –æ —á–µ–º –±—É–¥–µ–º —É–≤–µ–¥–æ–º–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω–æ –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
notification_order0 = datetime.timedelta(days=7)
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É, –Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è. –ü–µ—Ä–≤–æ–µ
notification_order1 = datetime.timedelta(days=1)
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É, –Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è. –í—Ç–æ—Ä–æ–µ
notification_order2 = datetime.timedelta(days=5)
# —Å–∫–æ—Ä–æ –¥–µ–¥–ª–∞–π–Ω –ø–æ –≤—Å—Ç—Ä–µ—á–µ
notification_deadline = datetime.timedelta(days=7)
# –¥–µ–¥–ª–∞–π–Ω –ø–æ –≤—Å—Ç—Ä–µ—á–µ –Ω–∞—Å—Ç—É–ø–∏–ª
meeting_deadline = datetime.timedelta(days=10)

# —Å–ø–∏—Å–æ–∫ —á–∞–ø—Ç–µ—Ä–æ–≤ —Ç—Ä–∞–π–±–∞
chapters = ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã', 'SberCare', '–ë–µ–∑–±—É–º–∞–∂–Ω—ã–π –º–∏—Ä', '–û–±—Ä–∞—â–µ–Ω–∏—è', '–ë–æ—Ç—ã', '–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ', '–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã', '–ï–°–ó–ö', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', '–®—Ç–∞–±']

# –∏–Ω—Ñ–∞ –ø–æ –∫–Ω–æ–ø–∫–∞–º –≤ —ç–∫—Ä–∞–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
profile_btns = {
    "–§–∞–º–∏–ª–∏—è –∏ –ò–º—è üìù": {'reply': "–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª", 'state': 'set_fi', 'col': 'fi'},
    "–ß–∞–ø—Ç–µ—Ä üè¶": {'reply': "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞–ø—Ç–µ—Ä", 'state': 'set_chapter', 'col': 'chapter'},
    "–ö–æ–º–∞–Ω–¥–∞, —Ä–æ–ª—å, –∑–∞–¥–∞—á–∏ üíº": {'reply': "–í–≤–µ–¥–∏ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É, —Ä–æ–ª—å –∏ –∑–∞–¥–∞—á–∏", 
                                 'state': 'set_role_and_tasks', 'col': 'role_and_tasks'},
    "–•–æ–±–±–∏, —É–≤–ª–µ—á–µ–Ω–∏—è ü•Å": {'reply': "–í–≤–µ–¥–∏ —Å–≤–æ–∏ —Ö–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è", 'state': 'set_info', 
                                         'col': 'info'},
    "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è üì∑": {'reply': "–ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", 'state': 'set_photo', 
                                   'col': 'photo'},
    "instagram üîó": {'reply': "–í–≤–µ–¥–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ instagram", 'state': 'set_social_profile', 
                                  'col': 'social_profile'}
}

# —Ç–µ–∫—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—ã–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –¢—É—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç—ã, –≥–¥–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Å—Ç–∞–≤–ª—è—Ç—å –∫–∞–∫—É—é-—Ç–æ –∏–Ω—Ñ—É –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
texts = {
    "welcome_msg": """
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è! üëã
–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ <b>—Ä–∞–Ω–¥–æ–º–Ω—ã—Ö</b> –≤—Å—Ç—Ä–µ—á–∞—Ö, —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–ª–ª–µ–≥–∞–º–∏, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ä–∞–±–æ—Ç–∞–µ—à—å, –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä–∏—â–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.

‚ö†Ô∏è –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–æ–ª–ª–µ–≥ –∏–∑ —Ç—Ä–∞–π–±–∞ <b>–ó–∞–±–æ—Ç–∞ –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö</b>.

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∑–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üìã
""",
    "feedback_question": "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–∫–∞–∑–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –±–æ—Ç–∞ random coffee?",
    "empty_profile": "–ü–æ–∫–∞ —á—Ç–æ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç–æ–π. –ó–∞–ø–æ–ª–Ω–∏ –µ–≥–æ",
    "inactive_status": "–°–µ–π—á–∞—Å —Ç—ã –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω \n–î–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–ª–ª–µ–≥–∏ –Ω–∞–∂–º–∏ <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É</b> ",
    "order_check" : '''–ü–æ–≥–æ–¥–∏..
–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è, —á–∞–ø—Ç–µ—Ä, –∞ —Ç–∞–∫–∂–µ –∫–æ–º–∞–Ω–¥—É –∏ —Ç–≤–æ—é —Ä–æ–ª—å üëá''',
    "cancel_meeting_check": "–û—Ç–º–µ–Ω—è–µ–º –≤—Å—Ç—Ä–µ—á—É?\n–¢–≤–æ–π –∫–æ–ª–ª–µ–≥–∞ –±—É–¥–µ—Ç –≥—Ä—É—Å—Ç–∏—Ç—å üò•",
    "meeting_canceled_user": "–í—Å—Ç—Ä–µ—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ üëå\n\n",
    "meeting_canceled_partner": '''–£–ø—Å..\n–¢–≤–æ–π –∫–æ–ª–ª–µ–≥–∞ –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É üò≠''',
    "chapter_change": "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —á–∞–ø—Ç–µ—Ä, –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤—Å—Ç—Ä–µ—á—É",
    "meeting_finished_order": "–ú—ã –∑–∞–∫–∏–Ω—É–ª–∏ —Ç–µ–±—è –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–ª–µ–≥–∏, —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –æ–ø–æ–≤–µ—Å—Ç–∏–º —Ç–µ–±—è üòâ",
    "meeting_finished_w_review": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤ –æ –≤—Å—Ç—Ä–µ—á–µ",
    "hello": "–ü—Ä–∏–≤–µ—Ç! üëã",
    "meeting_finished_partner": "–¢–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –æ–ø–æ–≤–µ—Å—Ç–∏–ª –±–æ—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏",
    "meeting_finished_user": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –≤—Å—Ç—Ä–µ—á–µ",
    "deadline": '''–ü—Ä–∏–≤–µ—Ç! üëã
–î–µ–¥–ª–∞–π–Ω –ø–æ –≤—Å—Ç—Ä–µ—á–µ –Ω–∞—Å—Ç—É–ø–∏–ª ‚è∞

–ú—ã —Å–¥–µ–ª–∞–ª–∏ —Ç–µ–±—è <b>–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º</b>.
–î–ª—è —É—á–∞—Å—Ç–∏—è –≤–æ –≤—Å—Ç—Ä–µ—á–∞—Ö –Ω–∞–∂–º–∏ <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É</b> ''',
    "deadline_notification": '''–ü—Ä–∏–≤–µ—Ç! üëã
–ü—Ä–æ—à–ª–∞ –Ω–µ–¥–µ–ª—è, –∞ —Ç—ã –µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ–ª –≤—Å—Ç—Ä–µ—á—É?
–ï—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã:
<b>-–≤—Å—Ç—Ä–µ—á–∞ –ø—Ä–æ—à–ª–∞</b>, –Ω–æ –∑–∞–±—ã–ª –ø—Ä–æ–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å - —Å–¥–µ–ª–∞–π —ç—Ç–æ —Å–µ–π—á–∞—Å –ø–æ –∫–Ω–æ–ø–∫–µ —Å–Ω–∏–∑—É
<b>-–≤—Å—Ç—Ä–µ—á—É –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∏</b> - —Å–ø–∏—à–∏—Å—å —Å –∫–æ–ª–ª–µ–≥–æ–π, —É —Ç–µ–±—è –µ—Å—Ç—å –µ—â–µ 3 –¥–Ω—è!
<b>-–ù–µ —Å–º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É</b> - –æ—Ç–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á—É –ø–æ –∫–Ω–æ–ø–∫–µ —Å–Ω–∏–∑—É''',
    "order_notification2": """–ü—Ä–∏–≤–µ—Ç! üëã
–ú—ã –ø—Ä–æ —Ç–µ–±—è –Ω–µ –∑–∞–±—ã–ª–∏!
–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç <b>–Ω–µ—Ç –Ω–æ–≤—ã—Ö</b> –∫–æ–ª–ª–µ–≥ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ üò≠
–ü—Ä–∏–¥–µ—Ç—Å—è –µ—â–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å..

–ê –ø–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏–º –∫–æ–ª–ª–µ–≥–∞–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞üì¢
https://t.me/sbercare_bots_random_coffee_bot""",
    "order_notification1": """–ü—Ä–∏–≤–µ—Ç! üëã
–°–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–ª–ª–µ–≥ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ—Ç, <b>–æ–∂–∏–¥–∞–π</b> –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è

–ê –ø–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏–º –∫–æ–ª–ª–µ–≥–∞–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞üì¢
https://t.me/sbercare_bots_random_coffee_bot""",
    "order_notification1_empty_data": """\n\n–¢–∞–∫–∂–µ –º—ã –æ–±—Ä–∞—Ç–∏–ª–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞...
–¢–≤–æ–µ–º—É –∫–æ–ª–ª–µ–≥–µ –±—É–¥–µ—Ç –ø—Ä–æ—â–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å —Ç–æ–±–æ–π –≤—Å—Ç—Ä–µ—á—É, –µ—Å–ª–∏ —Ç—ã —É–∫–∞–∂–µ—à—å –ø–æ —Å–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üìù

–ú–æ–∂–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ <b>–ø—Ä–æ—Ñ–∏–ª—å</b> üëá""",
    "newbie_notification": """–ü—Ä–∏–≤–µ—Ç! üëã
–¢–≤–æ–∏ –∫–æ–ª–ª–µ–≥–∏ –∂–¥—É—Ç —Ç–µ–±—è..

–ü—Ä–æ—à–ª–∞ –Ω–µ–¥–µ–ª—è, –∞ —Ç—ã —Ç–∞–∫ –∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É üò¢

–°–¥–µ–ª–∞–π —ç—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –ø–æ –∫–Ω–æ–ø–∫–µ —Å–Ω–∏–∑—Éüëá"""
}

def btn(text, callback_data=None):
    """
    —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä—É—é –ø–æ–∫–∞–∂–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –≤ —á–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –∫–Ω–æ–ø–∫–∞ –ø–æ—à–ª–µ—Ç –≤ –±–æ—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
    """
    if callback_data == None:
        callback_data = text
    return types.InlineKeyboardButton(text, callback_data=callback_data)

async def send_msg(recipient, msg, reply_markup=None):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –µ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü—É messagesfrombot
    """
    try:
        await bot.send_message(recipient, msg, reply_markup=reply_markup, parse_mode='html')
        db.messagesfrombot_add(recipient, msg)
    except Exception:
        print('–∏–Ω—Ñ–∞ –æ—Ç –±–æ—Ç–∞: 3')
        print('–∏–Ω—Ñ–∞ –æ—Ç –±–æ—Ç–∞: ' + str(traceback.format_exc()))
        print('–∏–Ω—Ñ–∞ –æ—Ç –±–æ—Ç–∞: 4')

@dp.message_handler(commands='start')
async def cmd_start(message: types.Message): 
    """
    –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É start
    """
    markup = types.InlineKeyboardMarkup()
    markup.add(btn('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üìù', callback_data='/profile'))
    await send_msg(message.from_user.id, texts['welcome_msg'], reply_markup=markup)

@dp.callback_query_handler(text='/profile')
async def profile_query(query: types.CallbackQuery):
    """
    –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—å
    """
    # –≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –∫–Ω–æ–ø–∫–∏
    await profile_united(query.from_user.id, msg="–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: \n", state='profile')

@dp.message_handler(commands='profile')
async def profile(message: types.Message):
    """
    –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É profile
    """
    await profile_united(message.from_user.id, msg="–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: \n", state='profile')

@dp.message_handler(commands='change_status')
async def change_status(message: types.Message):
    """
    –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É change_status
    """
    await default_united(message.from_user.id)

@dp.message_handler(commands='feedback')
async def feedback_command(message: types.Message):
    """
    –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É feedback
    """
    markup = feedback_markup()
    await send_msg(message.from_user.id, texts['feedback_question'], reply_markup=markup)
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    db.Users().update(message.from_user.id, state='set_feedback')

def profile_func_markup():
    """
    —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    """
    markup = types.InlineKeyboardMarkup()
    for profile_btn in profile_btns.keys():
        markup.add(btn(profile_btn))
    markup.add(btn('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è ‚úÖ', callback_data='/default'))
    return markup

def profile_func(user_profile, msg):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    msg_in = msg
    profile_dict = {v['col']: k for k,v in profile_btns.items()}
    if user_profile['fi'] != None:
        msg += f"{profile_dict['fi']}: {user_profile['fi']}{' @' + user_profile['username'] if user_profile['username'] != '' else ''}\n"
    if user_profile['chapter'] != None:
        msg += f"{profile_dict['chapter']}: {user_profile['chapter']}\n"
    if user_profile['role_and_tasks'] != None:
        msg += f"{profile_dict['role_and_tasks']}: {user_profile['role_and_tasks']}\n"
    if user_profile['info'] != None:
        msg += f"{profile_dict['info'].split('(')[0]}: {user_profile['info']}\n"
    if user_profile['social_profile'] != None:
        msg += f"{profile_dict['social_profile'].split('(')[0]}: {user_profile['social_profile']}\n"
    if msg == msg_in:
        msg = texts['empty_profile']
    return msg, user_profile

@dp.callback_query_handler(text='/default')
async def default(query: types.CallbackQuery):
    """
    –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —ç–∫—Ä–∞–Ω —Å—Ç–∞—Ç—É—Å–∞
    """
    await default_united(query.from_user.id)

def default_func(tgid, msg=None):
    """
    —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞
    """
    tgid_user = db.Users().get_user(tgid)
    if tgid_user['status'] == 'active':
        msg += f"–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –≤ —á–∞–ø—Ç–µ—Ä–µ <b>{tgid_user['chapter']}</b>. –û–∂–∏–¥–∞–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"
        
    elif tgid_user['status'] == 'inactive':
        msg += texts['inactive_status']

    elif tgid_user['status'] == 'in_process':
        # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—É
        partner = db.Meetings_user().get_user_partner(tgid)
        partner = db.Users().get_user(partner)
        deadline = db.Meetings().current_user_meeting(tgid)[0]['end_dt']
        deadline = datetime.datetime.fromtimestamp(deadline).strftime("%Y-%m-%d")
        msg += f"–£ —Ç–µ–±—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞\n–¢–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä: {partner['fi']}{' @' + partner['username'] if partner['username'] != '' else ''}.\n–î–µ–¥–ª–∞–π–Ω: {deadline}"
    return msg

def default_func_markup(tgid):
    """
    —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞
    """
    tgid_user = db.Users().get_user(tgid)
    markup = types.InlineKeyboardMarkup()
    if tgid_user['status'] == 'active':
        markup.add(btn('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –≤—Å—Ç—Ä–µ—á—É ‚ùå', callback_data='/cancel_order'))
        
    elif tgid_user['status'] == 'inactive':
        markup.add(btn('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É üîç', callback_data='/order'))

    elif tgid_user['status'] == 'in_process':
        markup.add(btn('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ üì∞', callback_data='/partner_profile'))
        markup.add(btn('–ü—Ä–æ–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ –ø—Ä–æ—à–µ–¥—à–µ–π –≤—Å—Ç—Ä–µ—á–µ ‚úÖ', callback_data='/meeting_inform'))
        markup.add(btn('–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É ‚ùå', callback_data='/cancel_meeting_request'))

    markup.add(btn('–ü—Ä–æ—Ñ–∏–ª—å üìã', callback_data='/profile'))
    markup.add(btn('–î–∞—Ç—å —Ñ–∏–¥–±–µ–∫ –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ üé§', callback_data='/feedback'))
    return markup

async def default_united(tgid, msg=None, text=True, msg_first=None):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —ç–∫—Ä–∞–Ω —Å—Ç–∞—Ç—É—Å–∞
    """
    if msg == None:
        msg = ""
    
    markup = default_func_markup(tgid)
    if text:
        msg = default_func(tgid, msg=msg)
    
    if msg_first:
        await send_msg(tgid, msg_first)
    await send_msg(tgid, msg, reply_markup=markup)
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    db.Users().update(tgid, state='default')

@dp.callback_query_handler(text='/order')
async def order(query: types.CallbackQuery):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫—É –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
    """
    global user
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–∞—Ç—É—Å inactive –∏ —á—Ç–æ —É –Ω–µ–≥–æ —É–∂–µ —Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
    if (db.Orders().current_order(query.from_user.id) == []) and (user['status'] == 'inactive'): 
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª—è —Ñ–∏, —á–∞–ø—Ç–µ—Ä, —Ä–æ–ª—å
        if user['fi'] != None and user['chapter'] != None and user['role_and_tasks'] != None:
            # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            db.Users().update(user['tgid'], status='active')
            user = db.Users().get_user(query.from_user.id)

            # –ª–æ–≥–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
            db.Orders().new(query.from_user.id)

            # –∏—â–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            active_users = db.Users().get_for_meeting(user['chapter'])
            active_users, done, current_user = await search_partner(active_users, tgid=query.from_user.id)
            # –µ—Å–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ –≤—ã–≤–æ–¥–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —ç–∫—Ä–∞–Ω
            if done == False:
                await default_united(query.from_user.id)
        else:
            msg = texts['order_check']
            markup = types.InlineKeyboardMarkup()
            markup.add(btn('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üìù', callback_data='/profile'))
            await send_msg(query.from_user.id, msg, reply_markup=markup)

async def cancel_order_user(user_tgid):
    global user
    user = db.Users().get_user(user_tgid)
    # –æ—Ç–º–µ–Ω—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (db.Orders().current_order(user_tgid) != []) and (user['status'] == 'active'):
        db.Users().update(user_tgid, status='inactive')
        user = db.Users().get_user(user_tgid)
        db.Orders().delete_order(user_tgid)
        await default_united(user_tgid)

@dp.callback_query_handler(text='/cancel_order')
async def cancel_order(query: types.CallbackQuery):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
    """
    await cancel_order_user(query.from_user.id)
    

@dp.callback_query_handler(text='/cancel_meeting_request')
async def cancel_meeting_request(query: types.CallbackQuery):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É
    """
    # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –æ—Ç–º–µ–Ω—É –≤—Å—Ç—Ä–µ—á–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if db.Meetings().current_user_meeting(query.from_user.id) != [] and (user['status'] == 'in_process'):
        msg = texts['cancel_meeting_check']
        markup = types.InlineKeyboardMarkup()
        markup.add(btn('–û—Ç–º–µ–Ω—è–µ–º ‚ùå', callback_data='/cancel_meeting'))
        markup.add(btn('–ù–∞–∑–∞–¥ üîô', callback_data='/default'))
        await send_msg(query.from_user.id, msg, reply_markup=markup)

@dp.callback_query_handler(text='/cancel_meeting')
async def cancel_meeting(query: types.CallbackQuery):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω—è–µ–º ‚ùå (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –≤—Å—Ç—Ä–µ—á–∏)
    """
    await finish_meeting_user(query.from_user.id, 'rejection')

@dp.callback_query_handler(lambda q: q.data in profile_btns.keys())
async def profile_btn(query: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    """
    text = query.data
    if text in profile_btns.keys():
        msg = profile_btns[text]['reply']
        markup = types.InlineKeyboardMarkup()
        chapter_text = list({k: v for k, v in profile_btns.items() if v['col'] == 'chapter'}.keys())[0]
        if text == chapter_text:
            if (db.Orders().current_order(query.from_user.id) == []) and (user['status'] == 'inactive'): 
                for chapter in chapters:
                    markup.add(btn(f'{chapter}'))
            else:
                msg = texts['chapter_change']
                markup.add(btn('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –≤—Å—Ç—Ä–µ—á—É ‚ùå', callback_data='/cancel_order'))

        markup.add(btn("–ù–∞–∑–∞–¥ üîô", callback_data="/profile"))
        await send_msg(query.from_user.id, msg, reply_markup=markup)
        if msg == profile_btns[text]['reply']:
            db.Users().update(query.from_user.id, state=profile_btns[text]['state'])

async def profile_united(tgid, msg=None, to_user=None, state=None, markup=True):
    """
    —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —ç–∫—Ä–∞–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
    """
    user_profile = db.Users().get_user(tgid)
    # markup - –ª–∏–±–æ True, –ª–∏–±–æ —Å–≤–æ–∏ –∫–Ω–æ–ø–∫–∏
    if to_user == None:
        to_user = tgid
    if msg == None:
        msg = ""
    if markup==True:
        markup = profile_func_markup()
    msg, user_profile = profile_func(user_profile, msg)
    if user_profile['photo'] != None:
        await bot.send_photo(to_user, user_profile['photo'], caption=msg, reply_markup=markup)
    else:
        await bot.send_message(to_user, msg, reply_markup=markup)
    db.messagesfrombot_add(to_user, msg)
    if state:
        db.Users().update(user_profile['tgid'], state=state)

async def finish_meeting_user(tgid, status, review=None):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å—Ç—Ä–µ—á—É –ø–æ –æ–¥–Ω–æ–π –∏–∑ –ø—Ä–∏—á–∏–Ω: done/deadline/rejection
    """
    global user
    user = db.Users().get_user(tgid)
    if db.Meetings().current_user_meeting(tgid) != [] and (user['status'] == 'in_process'):
        partner, meeting_id = finish_meeting(tgid, status)
        if status == 'done':
            # –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤ –æ –≤—Å—Ç—Ä–µ—á–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if review:
                db.meeting_reviews_add(tgid, meeting_id, review)
                msg_user = texts['meeting_finished_w_review']
            else:
                msg_user = texts['meeting_finished_user']
            msg_user = msg_user + '\n\n' + texts['meeting_finished_order']
            msg_partner = texts['hello'] + '\n' + texts['meeting_finished_partner'] + '\n\n' + texts['meeting_finished_order']
        elif status == 'deadline':
            msg_user = texts['deadline']
            msg_partner = texts['deadline']
        elif status == 'rejection':
            # –∑–∞–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É rejections
            db.rejection_add(tgid, meeting_id)
            msg_user = texts['meeting_canceled_user']
            msg_partner = texts['meeting_canceled_partner'] + '\n\n' + texts["meeting_finished_order"]
        # –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        # –ø–∏—à–µ–º —é–∑–µ—Ä—É
        await default_united(tgid, msg=msg_user, text=False)
        # –ø–∏—à–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä—É
        await default_united(partner, msg=msg_partner, text=False) 


def feedback_markup():
    """
    —Ñ-—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –≤–≤–æ–¥–∞ —Ñ–∏–¥–±–µ–∫–∞ –±–æ—Ç—É
    """
    markup = types.InlineKeyboardMarkup()
    markup.add(btn('–ù–∏—á–µ–≥–æ –Ω–µ —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å', callback_data='/default'))
    return markup

@dp.callback_query_handler(text='/feedback')
async def feedback(query: types.CallbackQuery):
    """
    —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —ç–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ —Ñ–∏–¥–±–µ–∫–∞ –±–æ—Ç—É
    """
    markup = feedback_markup()
    msg = '–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–∫–∞–∑–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –±–æ—Ç–∞ random coffee?'
    await send_msg(query.from_user.id, msg, reply_markup=markup)
    db.Users().update(query.from_user.id, state='set_feedback')

@dp.callback_query_handler(text='/meeting_inform')
async def meeting_inform_query(query: types.CallbackQuery):
    """
    —Ñ-—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ü—Ä–æ–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ –ø—Ä–æ—à–µ–¥—à–µ–π –≤—Å—Ç—Ä–µ—á–µ
    """
    if db.Meetings().current_user_meeting(query.from_user.id) != [] and (user['status'] == 'in_process'):
        msg = '–ö–∞–∫ –ø—Ä–æ—à–ª–∞ –≤—Å—Ç—Ä–µ—á–∞? –ù–∞–ø–∏—à–∏ –æ—Ç–∑—ã–≤'
        markup = types.InlineKeyboardMarkup()
        markup.add(btn('–ë–µ–∑ –æ—Ç–∑—ã–≤–∞', callback_data='/set_meeting_inform'))
        markup.add(btn('–ù–∞–∑–∞–¥ üîô', callback_data='/default'))
        await send_msg(query.from_user.id, msg, reply_markup=markup)
        db.Users().update(query.from_user.id, state='set_meeting_review')

def finish_meeting(tgid, status):
    """
    —Ñ-—è –ª–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    # –Ω–∞—Ö–æ–¥–∏–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    partner = db.Meetings_user().get_user_partner(tgid)
    # —Å—Ç–∞–≤–∏–º –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ result = status
    meeting_id = db.Meetings().current_user_meeting(tgid)[0]['meeting_id']
    db.Meetings().update(meeting_id, result=status, end_dt=db.now())
    # –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—Ç–∞–≤–∏–º "–≤ –æ—á–µ—Ä–µ–¥—å"(–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    for user_tgid in [tgid, partner]:
        if (status == 'done') or (status=='rejection' and user_tgid==partner):
            user_status = 'active'
            db.Orders().new(user_tgid)
        else:
            user_status = 'inactive'
        db.Users().update(user_tgid, status=user_status)
    return partner, meeting_id

@dp.callback_query_handler(text='/set_meeting_inform')
async def set_meeting_inform(query: types.CallbackQuery):
    """
    —Ñ-—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ –±–µ–∑ –æ—Ç–∑—ã–≤–∞
    """
    await finish_meeting_user(query.from_user.id, 'done')

async def do_start_meeting_user(tgid):
    """
    —Ñ-—è —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–∞—Ä—Ç–Ω–µ—Ä–µ
    """
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —ç–∫—Ä–∞–Ω —é–∑–µ—Ä—É
    # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—É
    partner = db.Users().get_user(db.Meetings_user().get_user_partner(tgid))

    msg = f'''–ú—ã –Ω–∞—à–ª–∏ —Ç–µ–±–µ –∫–æ–ª–ª–µ–≥—É –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ - {partner.fi}{' @' + partner.username if partner.username != '' else ''} ü•≥!
–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É –≤ —Ç–µ—á–µ–Ω–∏–µ <b>–æ–¥–Ω–æ–π –Ω–µ–¥–µ–ª–∏</b>.\n
<b>–ü—Ä–æ–≤–µ–ª–∏ –≤—Å—Ç—Ä–µ—á—É</b> - –ø—Ä–æ–∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–π –æ–± —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á–∏ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–Ω–∏–∑—É
<b>–ù–µ —Å–º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É</b> - –æ—Ç–º–µ–Ω–∏ –µ–µ —Ç–∞–∫–∂–µ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–Ω–∏–∑—É '''
    await default_united(tgid, msg=msg, text=False)

@dp.callback_query_handler(text='/partner_profile')
async def partner_profile(query: types.CallbackQuery):
    """
    —Ñ-—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    """
    # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—É
    if db.Meetings().current_user_meeting(query.from_user.id) != [] and (user['status'] == 'in_process'):
        partner = db.Meetings_user().get_user_partner(query.from_user.id)
        markup = types.InlineKeyboardMarkup()
        markup.add(btn('–ù–∞–∑–∞–¥ üîô', callback_data='/default'))
        await profile_united(partner, msg="–ü—Ä–æ—Ñ–∏–ª—å —Ç–≤–æ–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:\n", state='default', to_user=query.from_user.id, markup=markup)

def do_start_meeting_db(tgid, partner):
    """
    —Ñ-—è –ª–æ–≥–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    # –ø–æ–ª—É—á–∞–µ–º meeting_id
    meeting_id = str(uuid.uuid4())

    # –ª–æ–≥–∏—Ä—É–µ–º –≤—Å—Ç—Ä–µ—á—É –≤ —Ç–∞–±–ª–∏—Ü—É meetings
    db.Meetings().add(meeting_id, db.Users().get_user(tgid)['chapter'], meeting_deadline)

    for client in [tgid, partner]:
        # –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
        db.Users().update(client, status='in_process')
        #–∞–ø–¥–µ–π—Ç–∏–º meeting_id –≤ orders
        db.Orders().update_meeting(client, meeting_id)

    # –ª–æ–≥–∏—Ä—É–µ–º –≤—Å—Ç—Ä–µ—á—É –≤ —Ç–∞–±–ª–∏—Ü—É meetings_user
    db.Meetings_user().add(meeting_id, tgid, partner)
    db.Meetings_user().add(meeting_id, partner, tgid)

async def start_meeting(tgid, partner):
    """
    —Ñ-—è —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É
    """
    logging.info(f"–∏–Ω—Ñ–∞ –æ—Ç –±–æ—Ç–∞: Starting meeting for user {tgid}")
    print(f"–∏–Ω—Ñ–∞ –æ—Ç –±–æ—Ç–∞: Starting meeting for user {tgid}")

    # –ª–æ–≥–∏—Ä—É–µ–º –≤—Å—Ç—Ä–µ—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    do_start_meeting_db(tgid, partner)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await do_start_meeting_user(tgid)
    await do_start_meeting_user(partner)

async def search_partner(active_users, tgid=None):
    """
    —Ñ-—è –∏—â–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏
    """

    done = False
    if tgid==None:
        tgid = active_users[0]
    partners = active_users.copy()
    partners.remove(tgid)
    if partners!=[]:
        # –ø–æ–ª—É—á–∞–µ–º –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤(—Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å —Å —é–∑–µ—Ä–æ–º, –∏–ª–∏ —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—É–¥–∞—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
        stop_partners = db.Meetings_user().check_partners(tgid)
        # –æ—Ç—Å–µ–∫–∞–µ–º —Å—Ç–æ–ø–ª–∏—Å—Ç
        partners = [i for i in partners if i not in stop_partners]
        # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–µ –ø—É—Å—Ç, —Ç–æ –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ
        if type(partners) == list and partners != []:
            partner = partners[0]
            await start_meeting(tgid, partner)
            active_users.remove(tgid)
            active_users.remove(partner)
            done = True
        if tgid in active_users:
            active_users.remove(tgid)
    else:
        active_users.remove(tgid)
    return active_users, done, tgid

async def do_check_deadlines():
    """
    —Ñ-—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ–¥–ª–∞–π–Ω—ã –≤—Å—Ç—Ä–µ—á
    """
    # –ø–æ–ª—É—á–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –¥–µ–¥–ª–∞–π–Ω –ø—Ä–æ—à–µ–ª
    meetings = db.Meetings().deadline_meetings()
    for meeting in meetings:
        # –ø–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        partners = db.Meetings_user().get_partners(meeting)
        await finish_meeting_user(partners[0], 'deadline')

    # –ø–æ–ª—É—á–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –¥–µ–¥–ª–∞–π–Ω —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç
    meetings = db.Meetings().deadline_meetings(deadline = notification_deadline)
    for meeting in meetings:
        # –ø–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        partners = db.Meetings_user().get_partners(meeting)
        for partner in partners:
            msg = texts['deadline_notification']
            await default_united(partner, msg=msg, text=False)
        db.Meetings().update(meeting, notification_id=1)

async def do_notification_order(status, current_user):
    """
    –±–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤—Å—Ç—Ä–µ—á—É, –Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω
    —É–≤–µ–¥–æ–º–ª—è–µ—Ç, —á—Ç–æ –ø–∞—Ä—Ç–Ω–µ—Ä –∏—â–µ—Ç—Å—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—Ä–æ—à–µ–Ω. –ï—Å—Ç—å –¥–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –≤ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è
    –í—Ä–µ–º—è –∑–∞–¥–∞–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∏–ø—Ç–∞
    """
    if status == False:
        order = db.Orders().current_order(current_user)[0]
        if db.now() > datetime.datetime.fromtimestamp(order['order_dt']) + notification_order2 and order['notification_id'] == 1:
            msg = texts['order_notification2']
            await default_united(current_user, msg=msg, text=False)
            # –∞–ø–¥–µ–π—Ç–∏–º notification_id
            db.Orders().update(current_user, notification_id=2)

        elif db.now() > datetime.datetime.fromtimestamp(order['order_dt']) + notification_order1 and order['notification_id'] == None:
            msg = texts["order_notification1"]

            tgid = db.Users().get_user(current_user)
            if tgid['info'] == None and tgid['photo'] == None and tgid['social_profile'] == None:
                msg += texts["order_notification1_empty_data"]
            await default_united(current_user, msg=msg, text=False)
            # –∞–ø–¥–µ–π—Ç–∏–º notification_id
            db.Orders().update(current_user, notification_id=1)

@dp.message_handler(commands='statistics')
async def cmd_statistics(message: types.Message): 
    """
    —Ñ-—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É
    """
    users_cnt = db.Statistics().users_cnt()
    users_per_chapter = db.Statistics().users_per_chapter()
    meetings_per_week = db.Statistics().meetings_per_week()
    meetings_per_chapter = db.Statistics().meetings_per_chapter()
    users_meetings = db.Statistics().users_meetings()
    msg = f'''
<b>{users_cnt} - –ª—é–¥–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ</b>

<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —á–∞–ø—Ç–µ—Ä–∞–º:</b>
{users_per_chapter}

<b>–ö–æ–ª-–≤–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –ø–æ –Ω–µ–¥–µ–ª—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π(–Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª—å —Å –Ω–∞—á–∞–ª–∞ –≥–æ–¥–∞):</b>
{meetings_per_week}

<b>–ö–æ–ª-–≤–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –ø–æ —á–∞–ø—Ç–µ—Ä–∞–º:</b>
{meetings_per_chapter}

<b>–∫–æ–ª-–≤–æ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ–ª–∏ N –≤—Å—Ç—Ä–µ—á:</b>
{users_meetings}

    '''
    await send_msg(message.from_user.id, msg)

@dp.message_handler()
@dp.message_handler(content_types=['photo'])
async def other_messages(message: types.Message):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π(–Ω–µ –∫–Ω–æ–ø–∫–∏), –≥–¥–µ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∏—â–µ–º —Ñ—Ä–∞–∑—ã –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    """

    #–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
    profile_state_col = {v['state']: v['col'] for k, v in profile_btns.items()}
    if user['state'] in profile_state_col.keys():
        msg = None
        state_photo = {v: k for k,v in profile_state_col.items()}['photo']
        if ('photo' in dict(message).keys()) and (user['state'] == state_photo):
            msg = message.photo[0].file_id
        elif ('text' in dict(message).keys()) and (user['state'] != state_photo):
            msg = message.text
        if msg:
            db.Users().update(message.from_user.id, cols={profile_state_col[user['state']]: msg})
            msg = '–î–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã'
            await send_msg(message.from_user.id, msg)
            await profile_united(message.from_user.id, msg="–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: \n", state='profile')
    
    # –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å—Ç—Ä–µ—á—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –æ –≤—Å—Ç—Ä–µ—á–µ
    elif user['state'] == 'set_meeting_review':
        await finish_meeting_user(message.from_user.id, 'done', review=message.text)
    # –ø–∏—à–µ–º —Ñ–∏–¥–±–µ–∫ –æ –±–æ—Ç–µ –≤ –ë–î
    elif user['state'] == 'set_feedback':
        db.feedback_add(message.from_user.id, message.text)
        await default_united(message.from_user.id, msg_first='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å')

@dp.callback_query_handler()
async def other_queries(query: types.CallbackQuery):
    """
    —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫, –≥–¥–µ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    """
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—ã–±–æ—Ä —á–∞–ø—Ç–µ—Ä–∞
    profile_state_col = {v['state']: v['col'] for k, v in profile_btns.items()}
    state_chapter = {v: k for k,v in profile_state_col.items()}['chapter']
    if user['state'] == state_chapter:
        if (db.Orders().current_order(query.from_user.id) == []) and (user['status'] == 'inactive'): 
            # –∑–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–ª–æ–Ω–∫—É chapter –≤ —Ç–∞–±–ª–∏—Ü–µ users
            db.Users().update(query.from_user.id, cols={profile_state_col[user['state']]: query.data})
            msg = '–î–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã'
            await send_msg(query.from_user.id, msg)
            await profile_united(query.from_user.id, msg="–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: \n", state='profile')
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(btn("–ù–∞–∑–∞–¥ üîô", callback_data="/profile"))
            msg = '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —á–∞–ø—Ç–µ—Ä, –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤—Å—Ç—Ä–µ—á—É'
            await send_msg(query.from_user.id, msg, reply_markup=markup)

async def do_check_newbies():
    """
    –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å, —á—Ç–æ –æ–Ω–∏ –∑–∞—Ä–µ–≥–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ, –Ω–æ –Ω–µ –∑–∞—Ä–µ–≥–∞–ª–∏—Å—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
    """
    newbies = db.Users().get_newbies(notification_order0)
    for newbie in newbies:
        msg = texts['newbie_notification']
        await default_united(newbie, msg=msg, text=False)
        # –∞–ø–¥–µ–π—Ç–∏–º notification_id
        db.Users().update(newbie, notification_id=1)

async def check_meetings():
    """
    –ù–∞–∑–Ω–∞—á–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏ –∞–∫—Ç–∏–≤–Ω—ã–º —é–∑–µ—Ä–∞–º
    """
    user_chapters = db.db_operation(f"select distinct chapter from {db.tables['users']} ")
    user_chapters = [i['chapter'] for i in user_chapters]
    for chapter in user_chapters:
        active_users = db.Users().get_for_meeting(chapter)
        while active_users != []:
            active_users, status, current_user = await search_partner(active_users)
            # –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –∑–∞—è–≤–∫–∞–º –Ω–∞ –≤—Å—Ç—Ä–µ—á—É, —É –∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä—Ç–Ω–µ—Ä
            await do_notification_order(status, current_user)

    # –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏ –ø–æ –∏—Ö –¥–µ–¥–ª–∞–π–Ω–∞–º
    await do_check_deadlines()

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–∏—á–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ–≤–µ–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏
    await do_check_newbies()

async def process_event(event, dp: Dispatcher):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –≤ –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—Ö–æ–¥ aiogram
    """

    update = json.loads(event['body'])
    log.debug('Update: ' + str(update))

    # –ø–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = db.message_parse(update)
    
    # –ø–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
    db.message_log(msg)
    # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —á–µ–ª–æ–≤–µ–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    global user
    user = db.Users().check_new_user(msg)
    
    Bot.set_current(dp.bot)
    update = types.Update.to_object(update)
    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await dp.process_update(update)


async def handler(event, context):
    """
    —Ö–µ–Ω–¥–ª–µ—Ä —è–Ω–¥–µ–∫—Å —Ñ—É–Ω–∫—Ü–∏–∏. –ò–º–µ–Ω–Ω–æ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç —è–Ω–¥–µ–∫—Å —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    print(event)
    try:
        if 'httpMethod' in event.keys():
            if event['httpMethod'] == 'POST':
                # print(json.loads(event['body']))
                if 'callback_query' in json.loads(event['body']) or \
                    'message' in json.loads(event['body']):
                    # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å—Ç–∞—Ä—à–µ –ø–æ–ª –º–∏–Ω—É—Ç—ã, —Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º.
                    if datetime.datetime.fromtimestamp(event['requestContext']['requestTimeEpoch']) >\
                    (datetime.datetime.now() - datetime.timedelta(seconds=30)):
                        await process_event(event, dp)
                    return {'statusCode': 200, 'body': 'ok'}
                # –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, 
                # —Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –≤—Å—Ç—Ä–µ—á—É, –µ—Å–ª–∏ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–Ω–∞ –µ—Å—Ç—å
                # —Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—Å—Ç—Ä–µ—á—É, –µ—Å–ª–∏ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–Ω–∞ –µ—Å—Ç—å
                elif 'my_chat_member' in json.loads(event['body']) and \
                    json.loads(event['body'])['my_chat_member']['new_chat_member']['status'] == 'kicked':
                    rej_user = json.loads(event['body'])['my_chat_member']['from']['id']
                    await cancel_order_user(rej_user)
                    await finish_meeting_user(rej_user, 'rejection')
                    return {'statusCode': 200, 'body': 'ok'}
            else:
                print('–∏–Ω—Ñ–∞ –æ—Ç –±–æ—Ç–∞: –ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –±–æ—Ç–∞
                await send_msg(int(os.environ.get('ADMIN_TGID')), '–ª–µ–≤–æ–µ —Å–æ–æ–æ–±—â–µ–Ω–∏–µ: \n' + str(event))
                return {'statusCode': 200, 'body': 'ok'}
        # –µ—Å–ª–∏ –≤ –±–æ—Ç–∞ –ø—Ä–∏—à–µ–ª –Ω–∞—à —Ç—Ä–∏–≥–µ—Ä, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–π, –ø—Ä–æ–≤–µ—Ä–∫—É –¥–µ–¥–ª–∞–π–Ω–æ–≤, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        elif any(x in str(event) for x in os.environ.get('TRIGERS').split(',')):
            await check_meetings()
            return {'statusCode': 200, 'body': 'ok'}
    except Exception:
        print(f'–∏–Ω—Ñ–∞ –æ—Ç –±–æ—Ç–∞: 1')
        print(str(traceback.format_exc()))
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω—É –±–æ—Ç–∞
        await send_msg(int(os.environ.get('ADMIN_TGID')), str(traceback.format_exc()))
        print(f'–∏–Ω—Ñ–∞ –æ—Ç –±–æ—Ç–∞: 2')
    return {'statusCode': 405}